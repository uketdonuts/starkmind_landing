#!/usr/bin/env python3
"""
Script de diagn√≥stico completo para el sistema de correos de StarkMind
"""

import smtplib
import socket
import ssl
import os
from datetime import datetime
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

def check_smtp_connectivity():
    """Verifica la conectividad con el servidor SMTP de Zoho"""
    
    print("üîç DIAGN√ìSTICO DE CONECTIVIDAD SMTP")
    print("=" * 40)
    
    smtp_server = "smtp.zoho.com"
    smtp_port = 465
    
    print(f"üì° Probando conexi√≥n a {smtp_server}:{smtp_port}")
    
    try:
        # Verificar resoluci√≥n DNS
        print("üîç Resolviendo DNS...")
        ip = socket.gethostbyname(smtp_server)
        print(f"‚úÖ DNS resuelto: {smtp_server} -> {ip}")
        
        # Verificar conectividad de red
        print("üåê Verificando conectividad de red...")
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(10)
        result = sock.connect_ex((smtp_server, smtp_port))
        sock.close()
        
        if result == 0:
            print("‚úÖ Conectividad de red: OK")
            
            # Intentar conexi√≥n SMTP
            print("üìß Verificando conexi√≥n SMTP...")
            context = ssl.create_default_context()
            
            try:
                server = smtplib.SMTP_SSL(smtp_server, smtp_port, context=context)
                server.set_debuglevel(0)  # Sin debug para output limpio
                
                # Obtener info del servidor
                status, response = server.noop()
                print(f"‚úÖ Conexi√≥n SMTP establecida: {status} - {response.decode()}")
                
                server.quit()
                return True
                
            except smtplib.SMTPException as e:
                print(f"‚ùå Error SMTP: {str(e)}")
                return False
                
        else:
            print(f"‚ùå No se puede conectar al puerto {smtp_port}: Error {result}")
            return False
            
    except socket.gaierror as e:
        print(f"‚ùå Error DNS: {str(e)}")
        return False
    except Exception as e:
        print(f"‚ùå Error inesperado: {str(e)}")
        return False

def test_smtp_auth():
    """Prueba la autenticaci√≥n SMTP con las credenciales"""
    
    print("\nüîê PRUEBA DE AUTENTICACI√ìN SMTP")
    print("=" * 35)
    
    smtp_server = "smtp.zoho.com"
    smtp_port = 465
    username = os.getenv('ZOHO_EMAIL')
    password = os.getenv('ZOHO_PASSWORD')
    
    if not username or not password:
        print("‚ùå Credenciales no encontradas en variables de entorno")
        return False
    
    print(f"üë§ Usuario: {username}")
    print(f"üîë Password: {'*' * len(password)}")
    
    try:
        context = ssl.create_default_context()
        server = smtplib.SMTP_SSL(smtp_server, smtp_port, context=context)
        
        print("üîç Intentando autenticaci√≥n...")
        server.login(username, password)
        print("‚úÖ Autenticaci√≥n exitosa")
        
        server.quit()
        return True
        
    except smtplib.SMTPAuthenticationError as e:
        print(f"‚ùå Error de autenticaci√≥n: {str(e)}")
        print("üí° Verifica que las credenciales sean correctas")
        print("üí° Aseg√∫rate de que la autenticaci√≥n SMTP est√© habilitada en Zoho")
        return False
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
        return False

def test_alternative_ports():
    """Prueba puertos alternativos para SMTP"""
    
    print("\nüîÑ PROBANDO PUERTOS ALTERNATIVOS")
    print("=" * 35)
    
    smtp_server = "smtp.zoho.com"
    ports = [587, 465, 25]  # TLS, SSL, y puerto est√°ndar
    
    for port in ports:
        print(f"\nüì° Probando puerto {port}...")
        
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(5)
            result = sock.connect_ex((smtp_server, port))
            sock.close()
            
            if result == 0:
                print(f"‚úÖ Puerto {port}: Conectividad OK")
                
                # Probar SMTP en este puerto
                try:
                    if port == 465:
                        # SSL
                        context = ssl.create_default_context()
                        server = smtplib.SMTP_SSL(smtp_server, port, context=context)
                    else:
                        # TLS o plano
                        server = smtplib.SMTP(smtp_server, port)
                        if port == 587:
                            server.starttls()
                    
                    status, response = server.noop()
                    print(f"‚úÖ SMTP funcional en puerto {port}")
                    server.quit()
                    
                except Exception as e:
                    print(f"‚ùå SMTP no funcional en puerto {port}: {str(e)}")
            else:
                print(f"‚ùå Puerto {port}: No conecta")
                
        except Exception as e:
            print(f"‚ùå Error probando puerto {port}: {str(e)}")

def check_env_config():
    """Verifica la configuraci√≥n del entorno"""
    
    print("\n‚öôÔ∏è  VERIFICACI√ìN DE CONFIGURACI√ìN")
    print("=" * 35)
    
    required_vars = ['ZOHO_EMAIL', 'ZOHO_PASSWORD', 'FLASK_ENV']
    
    for var in required_vars:
        value = os.getenv(var)
        if value:
            if 'PASSWORD' in var:
                print(f"‚úÖ {var}: {'*' * len(value)}")
            else:
                print(f"‚úÖ {var}: {value}")
        else:
            print(f"‚ùå {var}: No configurado")

def test_simple_email():
    """Env√≠a un correo de prueba simple"""
    
    print("\nüìß PRUEBA DE ENV√çO SIMPLE")
    print("=" * 30)
    
    smtp_server = "smtp.zoho.com"
    smtp_port = 587  # Probemos TLS en lugar de SSL
    username = os.getenv('ZOHO_EMAIL')
    password = os.getenv('ZOHO_PASSWORD')
    
    if not username or not password:
        print("‚ùå Credenciales no disponibles")
        return False
    
    try:
        # Crear mensaje simple
        msg = MIMEText(f"Test email enviado el {datetime.now()}")
        msg['Subject'] = "Prueba de correo - StarkMind"
        msg['From'] = username
        msg['To'] = username  # Enviarse a s√≠ mismo
        
        print(f"üì§ Enviando correo de prueba a {username}...")
        
        # Conectar y enviar
        server = smtplib.SMTP(smtp_server, smtp_port)
        server.starttls()  # Habilitar TLS
        server.login(username, password)
        
        text = msg.as_string()
        server.sendmail(username, [username], text)
        server.quit()
        
        print("‚úÖ Correo enviado exitosamente")
        return True
        
    except Exception as e:
        print(f"‚ùå Error enviando correo: {str(e)}")
        return False

def main():
    """Funci√≥n principal de diagn√≥stico"""
    
    print("üîß DIAGN√ìSTICO COMPLETO DEL SISTEMA DE CORREOS")
    print("=" * 50)
    print(f"üìÖ Fecha: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    
    # Cargar variables de entorno
    from dotenv import load_dotenv
    load_dotenv()
    
    # Ejecutar diagn√≥sticos
    results = []
    
    results.append(("Configuraci√≥n", check_env_config()))
    results.append(("Conectividad SMTP", check_smtp_connectivity()))
    test_alternative_ports()
    results.append(("Autenticaci√≥n", test_smtp_auth()))
    results.append(("Env√≠o simple", test_simple_email()))
    
    # Resumen
    print("\n" + "=" * 50)
    print("üìä RESUMEN DEL DIAGN√ìSTICO")
    print("=" * 50)
    
    for test_name, result in results:
        if result is None:
            continue
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status} {test_name}")
    
    # Recomendaciones
    print("\nüí° RECOMENDACIONES:")
    print("1. Si la conectividad falla, verifica firewall/proxy")
    print("2. Si la autenticaci√≥n falla, revisa credenciales en Zoho")
    print("3. Considera usar puerto 587 con TLS en lugar de 465 SSL")
    print("4. Verifica que SMTP est√© habilitado en tu cuenta Zoho")

if __name__ == "__main__":
    main()
