#!/usr/bin/env bash
# Script de despliegue en producci√≥n para StarkMind Landing

set -e

COMPOSE_FILE="docker-compose.yml"

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to show usage
function usage() {
  echo -e "${BLUE}StarkMind Production Helper${NC}"
  echo ""
  echo -e "${YELLOW}Uso:${NC} $0 {prod|build|stop|restart|logs|status|clean|backup|setup|env|health}"
  echo ""
  echo -e "${YELLOW}Comandos:${NC}"
  echo "  prod      - Iniciar entorno de producci√≥n"
  echo "  build     - Construir im√°genes de producci√≥n"
  echo "  stop      - Detener entorno de producci√≥n"
  echo "  restart   - Reiniciar entorno de producci√≥n"
  echo "  logs      - Mostrar logs de producci√≥n"
  echo "  status    - Mostrar estado del entorno"
  echo "  clean     - Limpiar recursos de Docker"
  echo "  backup    - Crear respaldo de configuraci√≥n"
  echo "  setup     - Crear archivos de producci√≥n faltantes"
  echo "  env       - Configurar variables de entorno"
  echo "  health    - Verificar salud de la aplicaci√≥n"
  echo ""
  echo -e "${YELLOW}URL de Producci√≥n:${NC}"
  echo "  Aplicaci√≥n: http://localhost:5000"
  echo ""
  if ! check_production_files; then
# Function to check if required files exist
check_production_files() {
    local missing_files=()
    
    if [ ! -f "$COMPOSE_FILE" ]; then
        missing_files+=("$COMPOSE_FILE")
    fi
    
    if [ ! -f "Dockerfile" ]; then
        missing_files+=("Dockerfile")
    fi
    
    if [ ! -f ".env" ]; then
        missing_files+=(".env")
    fi
    
    if [ ${#missing_files[@]} -gt 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Archivos de producci√≥n faltantes:${NC}"
        for file in "${missing_files[@]}"; do
            echo -e "   - ${file}"
        done
        echo -e "${BLUE}üí° Ejecuta '${0} setup' para crear los archivos faltantes${NC}"
        return 1
    fi
    
    return 0
}

# Function to create production docker files
setup_production_files() {
    echo -e "${BLUE}üîß Configurando archivos de producci√≥n...${NC}"
    
    # Create production Dockerfile
    if [ ! -f "Dockerfile" ]; then
        echo "Creando Dockerfile..."
        cat > Dockerfile << 'EOF'
# Multi-stage build for production
FROM node:18-alpine AS react-build

# Increase Node.js memory limit for build
ENV NODE_OPTIONS="--max-old-space-size=4096"

WORKDIR /app

# Copy package files and install dependencies
COPY package*.json ./
RUN npm ci

# Copy source code and build
COPY . .
RUN npm run build

# Production Flask
FROM python:3.11-slim

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy Flask application
COPY app.py .
COPY templates/ templates/

# Copy React build from previous stage
COPY --from=react-build /app/build ./static

# Create non-root user
RUN adduser --disabled-password --gecos '' appuser && \
    chown -R appuser:appuser /app

USER appuser

EXPOSE 5000

CMD ["python", "app.py"]
EOF
    fi
    
    # Create production docker-compose.yml
    if [ ! -f "docker-compose.yml" ]; then
        echo "Creating docker-compose.yml..."
        cat > docker-compose.yml << 'EOF'
version: '2.2'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - FLASK_DEBUG=False
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  logs:
EOF
    fi
    
    # Create .env file if it doesn't exist
    if [ ! -f ".env" ]; then
        echo "Creating .env file..."
        
        # Generate secure SECRET_KEY
        SECRET_KEY=$(python3 -c "import secrets; print(secrets.token_hex(32))" 2>/dev/null || openssl rand -hex 32 2>/dev/null || echo "starkmind-$(date +%s)-$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 32)")
        
        # Create logs directory if it doesn't exist
        mkdir -p logs
        
        # Create credentials log file
        TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
        LOG_FILE="logs/credentials_$(date +%Y%m%d_%H%M%S).log"
        
        cat > "$LOG_FILE" << EOF
========================================
StarkMind Production Credentials Log
Generated: $TIMESTAMP
Environment: Production
========================================

Flask Configuration:
- SECRET_KEY: $SECRET_KEY
- FLASK_ENV: production
- FLASK_DEBUG: False

SMTP Configuration:
- ZOHO_EMAIL: noelsantamaria@agendify.xyz
- ZOHO_PASSWORD: (Destination01*+)
- DEFAULT_FROM_EMAIL: noelsantamaria@agendify.xyz

Application Settings:
- APP_NAME: StarkMind Landing
- APP_VERSION: 1.0.0

Server Information:
- Deployment Path: $(pwd)
- Server Hostname: $(hostname 2>/dev/null || echo "unknown")
- Server IP: $(hostname -I 2>/dev/null | awk '{print $1}' || echo "unknown")
- Docker Compose Version: $(docker-compose --version 2>/dev/null || echo "unknown")

Security Notes:
- SECRET_KEY is cryptographically secure
- All credentials are configured for production use
- This log file should be kept secure and backed up

========================================
EOF

        # Create .env file with generated SECRET_KEY
        cat > .env << EOF
# Flask Configuration
SECRET_KEY=$SECRET_KEY
FLASK_ENV=production
FLASK_DEBUG=False

# Zoho SMTP Configuration
ZOHO_EMAIL=noelsantamaria@agendify.xyz
ZOHO_PASSWORD=(Destination01*+)
DEFAULT_FROM_EMAIL=noelsantamaria@agendify.xyz

# MailerSend Configuration
MAILERSEND_API_KEY=

# Application Settings
APP_NAME=StarkMind Landing
APP_VERSION=1.0.0
EOF
        
        echo -e "${GREEN}‚úÖ .env file created with secure credentials${NC}"
        echo -e "${BLUE}üìã Credentials logged to: ${LOG_FILE}${NC}"
        echo -e "${YELLOW}üîê Generated SECRET_KEY: ${SECRET_KEY:0:16}...${NC}"
    fi
    
    echo -e "${GREEN}‚úÖ Production files created successfully!${NC}"
}

case "$1" in
    "start")
        echo -e "${BLUE}üè≠ Starting production environment...${NC}"
        if ! check_production_files; then
            echo -e "${YELLOW}Missing production files. Setting up automatically...${NC}"
            setup_production_files
            echo ""
        fi
        
        if check_production_files; then
            echo "Application will be available at: http://localhost:5000"
            docker-compose up -d --build
            echo -e "${GREEN}‚úÖ Production environment started${NC}"
            echo "Use '${0} logs' to view logs"
        else
            echo -e "${RED}‚ùå Failed to create production files${NC}"
            exit 1
        fi
        ;;
    "stop")
        echo -e "${YELLOW}üõë Stopping production environment...${NC}"
        docker-compose down
        echo -e "${GREEN}‚úÖ Production environment stopped${NC}"
        ;;
    "restart")
        echo -e "${BLUE}üîÑ Restarting production environment...${NC}"
        docker-compose down
        docker-compose up -d --build
        echo -e "${GREEN}‚úÖ Production environment restarted${NC}"
        ;;
    "build")
        echo -e "${BLUE}üî® Building production images...${NC}"
        if check_production_files; then
            docker-compose build --no-cache
            echo -e "${GREEN}‚úÖ Production build completed${NC}"
        fi
        ;;
    "deploy")
        echo -e "${BLUE}üöÄ Deploying to production...${NC}"
        if ! check_production_files; then
            echo -e "${YELLOW}Missing production files. Setting up automatically...${NC}"
            setup_production_files
            echo ""
        fi
        
        if check_production_files; then
            echo "Building fresh images..."
            docker-compose build --no-cache
            echo "Stopping current containers..."
            docker-compose down
            echo "Starting new containers..."
            docker-compose up -d
            echo "Cleaning up old images..."
            docker image prune -f
            echo -e "${GREEN}‚úÖ Production deployment completed${NC}"
            echo "Application is available at: http://localhost:5000"
        else
            echo -e "${RED}‚ùå Failed to create production files${NC}"
            exit 1
        fi
        ;;
    "logs")
        echo -e "${BLUE}üìã Showing production logs...${NC}"
        docker-compose logs -f
        ;;
    "status")
        echo -e "${BLUE}üìä Production environment status:${NC}"
        docker-compose ps
        echo ""
        echo -e "${BLUE}üìà Container health:${NC}"
        docker-compose exec app curl -f http://localhost:5000/api/health 2>/dev/null && echo -e "${GREEN}‚úÖ Health check passed${NC}" || echo -e "${RED}‚ùå Health check failed${NC}"
        ;;
    "shell")
        echo -e "${BLUE}üêö Opening shell in production container...${NC}"
        docker-compose exec app /bin/bash
        ;;
    "clean")
        echo -e "${YELLOW}üßπ Cleaning production Docker resources...${NC}"
        docker-compose down --volumes --remove-orphans
        docker system prune -f
        echo -e "${GREEN}‚úÖ Production cleanup completed${NC}"
        ;;
    "backup")
        echo -e "${BLUE}üíæ Creating production backup...${NC}"
        timestamp=$(date +"%Y%m%d_%H%M%S")
        backup_dir="backups/prod_${timestamp}"
        mkdir -p "$backup_dir"
        
        # Backup logs
        if [ -d "logs" ]; then
            cp -r logs "$backup_dir/"
        fi
        
        # Backup environment file
        if [ -f ".env" ]; then
            cp .env "$backup_dir/"
        fi
        
        # Create archive
        tar -czf "${backup_dir}.tar.gz" "$backup_dir"
        rm -rf "$backup_dir"
        
        echo -e "${GREEN}‚úÖ Backup created: ${backup_dir}.tar.gz${NC}"
        ;;
    "setup")
        setup_production_files
        ;;
    "env")
        echo -e "${BLUE}üîß Environment configuration${NC}"
        if [ ! -f ".env" ]; then
            echo "Creating .env file..."
            setup_production_files
        else
            echo "Current .env file contents:"
            echo -e "${YELLOW}$(cat .env)${NC}"
        fi
        echo ""
        echo -e "${YELLOW}To edit the .env file manually:${NC}"
        echo "  nano .env"
        echo "  vim .env"
        echo ""
        echo -e "${YELLOW}Required variables for full functionality:${NC}"
        echo "  SECRET_KEY        - Cryptographically secure key (auto-generated)"
        echo "  ZOHO_EMAIL        - noelsantamaria@agendify.xyz (configured)"
        echo "  ZOHO_PASSWORD     - Zoho app password (configured)"
        echo "  DEFAULT_FROM_EMAIL - noelsantamaria@agendify.xyz (configured)"
        echo ""
        echo -e "${GREEN}‚úÖ All credentials are auto-configured for StarkMind${NC}"
        echo -e "${BLUE}üìã Check logs/ directory for credential logs${NC}"
        ;;
    "update")
        echo -e "${BLUE}üîÑ Updating production environment...${NC}"
        echo "Pulling latest code..."
        git pull
        echo "Rebuilding and redeploying..."
        $0 deploy
        ;;
    "ssl")
        echo -e "${BLUE}üîí SSL certificate management${NC}"
        echo "This would typically integrate with Let's Encrypt or your SSL provider"
        echo "For now, you can manually add SSL certificates to nginx.conf"
        ;;
    *)
        echo -e "${BLUE}StarkMind Production Helper${NC}"
        echo ""
        echo -e "${YELLOW}Usage:${NC} $0 {start|stop|restart|build|deploy|logs|status|shell|clean|backup|setup|env|update|ssl}"
        echo ""
        echo -e "${YELLOW}Commands:${NC}"
        echo "  start     - Start production environment"
        echo "  stop      - Stop production environment"
        echo "  restart   - Restart production environment"
        echo "  build     - Build production Docker images"
        echo "  deploy    - Full deployment (build + restart + cleanup)"
        echo "  logs      - Show production logs"
        echo "  status    - Show environment status and health"
        echo "  shell     - Open shell in production container"
        echo "  clean     - Clean Docker resources"
        echo "  backup    - Create backup of logs and configuration"
        echo "  setup     - Create missing production files"
        echo "  env       - Show/create environment configuration"
        echo "  update    - Git pull + redeploy"
        echo "  ssl       - SSL certificate management (placeholder)"
        echo ""
        echo -e "${YELLOW}Production URL:${NC}"
        echo "  Application: http://localhost:5000"
        echo ""
        echo -e "${YELLOW}Examples:${NC}"
        echo "  $0 setup    # Create production files"
        echo "  $0 env      # Configure environment variables"
        echo "  $0 deploy   # Deploy to production"
        echo "  $0 status   # Check health status"
        echo ""
        if ! check_production_files; then
            echo -e "${RED}‚ö†Ô∏è  Production files missing. Run '${0} setup' first.${NC}"
        fi
        ;;
esac
